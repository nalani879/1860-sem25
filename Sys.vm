function Sys.xor 0
push argument 0
push argument 1
not // this nots argument 1
and // this is (argument 0 and not argument 1)
push argument 0
not // nots argument 0
push argument 1
and // this is (not argument 0 and argument 1)
or // this is (argument 0 and not argument 1) or (not argument 0 and argument 1)
return

  
//addition
function Sys.shiftLeft 2
push argument 0 // number we are shifiting
push argument 1 // how much we are shifting by

label LOOP1
push argument 1 // how much we are shifting by
push constant 0
eq // if how much we are shifting by is equal to zero stop shifting
if-goto STOPSHIFT

//else we continue
push argument 0 // num we shifting
push argument 0
add
pop argument 0 //updating x

push argument 1
push constant 1
sub // minusing the shift amount by 1 for the loop
pop argument 1
goto LOOP1


label STOPSHIFT //when the conditino of the loop is met
push argument 0 
  return


function Sys.encode 0
push argument 0
call Sys.computeParity 1 

push constant 0
eq
if-goto REMOBIT // if parity bit is equal to zero go to remove bit label

//else continue cause parity is 1
push argument 0
push constant 1
push constant 15
call Sys.shiftLeft 2
or
return

label REMOBIT
//this is when parity bit = 0
push argument 0
push constant 1
push constant 15
call Sys.shiftLeft 2
not //inverting
and
return 



  

function Sys.computeParity 2
push constant 0
pop local 0 // this is parity bit = 0

push constant 0
pop local 1 // counter = 0

label LOOP2
push local 1
push constant 15
eq
if-goto ENDLOOP2 // is counter = 15 then we stop loop

// else we continue
push constant 1
push local 1
call Sys.shiftLeft 2

push argument 0
and 
push constant 0
eq
if-goto NOXOR
//else we continue to xor

push local 0
push constant 1
call Sys.xor 2
pop local 0

label NOXOR
push local 1
push constant 1
add
pop local 1 // updating counter

goto LOOP2

label ENDLOOP2 //loop condition met so we return val
push local 0
return

function Sys.init 0 
call Sys.encode 1

label WHILE
goto WHILE



